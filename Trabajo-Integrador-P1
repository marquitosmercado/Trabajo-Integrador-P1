"""
Programa que muestra un Sistema de Gestión de Estudiantes con Árbol Binario de Búsqueda (ABB)

Simula el registro, búsqueda y eliminación de IDs de estudiantes.

Autores:
Mercado, Marcos Agustín
Nelson, Estefanía

"""

# 1. Definición del Nodo
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

# 2. Estructura del Árbol Binario de Búsqueda (BST)
class BST:
    def __init__(self):
        self.root = None

# 3. Operaciones Principales del BST

    # a. Insertar un Valor (insert method)
    def insert(self, root, key):
        if root is None:
            return Node(key)
        else:
            if root.val < key:
                root.right = self.insert(root.right, key)
            else:
                root.left = self.insert(root.left, key)
        return root

    # b. Buscar un Valor (search method)
    def search(self, root, key):
        if root is None or root.val == key:
            return root
        if root.val < key:
            return self.search(root.right, key)
        return self.search(root.left, key)

    # c. Encontrar el Valor Mínimo (find_min method)
    def find_min(self, node):
        current = node
        while current.left is not None:
            current = current.left
        return current

    # d. Eliminar un Nodo (delete_node method)
    def delete_node(self, root, key):
        if root is None:
            return root
        if key < root.val:
            root.left = self.delete_node(root.left, key)
        elif key > root.val:
            root.right = self.delete_node(root.right, key)
        else:
            if root.left is None:
                return root.right
            elif root.right is None:
                return root.left
            temp = self.find_min(root.right)
            root.val = temp.val
            root.right = self.delete_node(root.right, temp.val)
        return root

    # e. Recorrido In-order (in_order_traversal method)
    def in_order_traversal(self, root):
        if root:
            self.in_order_traversal(root.left)
            print(root.val, end=" ")
            self.in_order_traversal(root.right)

# 4. Código de Prueba (Driver Code)
tree = BST()
root = tree.insert(None, 10)
root = tree.insert(root, 5)
root = tree.insert(root, 15)
root = tree.insert(root, 3)
root = tree.insert(root, 7)

print("In-order traversal: ", end="")
tree.in_order_traversal(root)
print()

root = tree.delete_node(root, 5)
print("In-order traversal after deletion: ", end="")
tree.in_order_traversal(root)
print()
